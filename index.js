import chalk from "chalk";
import fs from "fs-extra";
import inquirer from "inquirer";
import {} from "nanospinner";
import path from "path";
import url from "url";
import controller from "./templates/controller.js";
import service from "./templates/service.js";

console.log(chalk.blue("Express CRUD Generator..."));

let module = {
  name: "",
  esm: false,
};

async function askParameters() {
  const defaults = {
    module_name: null,
    esm: null,
  };

  const answers = await inquirer.prompt([
    {
      name: "module_name",
      type: "input",
      message: "What is the name of the module?",
      default: function () {
        return defaults.module_name;
      },
      validate: async function (input) {
        console.clear();

        if (!input || input === defaults.module_name) {
          console.clear();
          return `Invalid module name! 
Use Strings with no Spaces. eg, Users or roles_permissions`;
        }

        return true;
      },
    },
    {
      name: "esm",
      type: "input",
      message: "Is this going to be ES Module?",
      suffix: chalk.gray(" y/N (CommonJS will be generated by default)"),
      default: function () {
        return defaults.esm;
      },
      filter: async function (input) {
        console.clear();

        if (!input) return "N";
        if (input?.toLowerCase() === "y") return "y";
        return "N";
      },
    },
  ]);

  module["name"] = answers.module_name;
  module["esm"] = answers.esm?.toLowerCase() === "y" && true;

  // console.clear();
}

await askParameters();

async function createFiles(esm) {
  try {
    const __dirname = path.dirname(url.fileURLToPath(import.meta.url));

    let modulePath = path.join(__dirname, module.name);
    let controllerPath = path.join(modulePath, `${module.name}.controller.js`);
    let servicePath = path.join(modulePath, `${module.name}.service.js`);

    console.log({ controllerPath, servicePath });

    await fs.ensureFile(controllerPath);
    await fs.writeFile(
      controllerPath,
      controller.generate({ module: module.name, esm })
    );

    await fs.ensureFile(servicePath);
    await fs.writeFile(
      servicePath,
      service.generate({ module: module.name, esm })
    );
  } catch (error) {
    console.log(error);
  }
}

await createFiles(module.esm);
